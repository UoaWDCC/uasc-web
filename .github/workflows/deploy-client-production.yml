name: Deploy Client Production

on:
  workflow_dispatch:
  # schedules this to run every 30 minutes
  schedule:
    - cron: "30 * * * *"

env:
  NEXT_PUBLIC_FIREBASE_API_KEY: ${{secrets.PROD_FIREBASE_API_KEY}}
  NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{secrets.PROD_FIREBASE_AUTH_DOMAIN}}
  NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{secrets.PROD_FIREBASE_PROJECT_ID}}
  NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{secrets.PROD_FIREBASE_STORAGE_BUCKET}}
  NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{secrets.PROD_FIREBASE_MESSAGING_SENDER_ID}}
  NEXT_PUBLIC_FIREBASE_APP_ID: ${{secrets.PROD_FIREBASE_APP_ID}}
  NEXT_PUBLIC_BACKEND_BASE_URL: ${{secrets.PROD_BACKEND_BASE_URL}}
  NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{secrets.PROD_MEASUREMENT_ID}}
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{secrets.PROD_STRIPE_PK}}
  NEXT_PUBLIC_SANITY_PROJECT_ID: ${{secrets.PROD_SANITY_PROJECT_ID}}
  NEXT_PUBLIC_SANITY_DATASET: production
  NEXT_CONFIG_ENV: production
  FRONTEND_BASE_URL: ${{secrets.PROD_FRONTEND_URL}}

jobs:
  setup:
    name: Setup
    needs: check_changes
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run Setup Composite Action
        uses: ./.github/ci-actions/setup/

  build-and-deploy:
    needs: [setup]
    runs-on: ubuntu-latest
    environment: Client Production
    steps:
      - uses: actions/checkout@v4
        with:
          ref: stable

      - name: Enable Corepack
        shell: bash
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            server/node_modules
            client/node_modules
            node_modules
          key: node-modules-pnpm-${{ hashFiles('pnpm-lock.yaml') }}

      - run: pnpm build --filter client

      - name: Publish to cloudflare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: uasc
          directory: client/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  verify:
    name: Verify
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.build-and-deploy.result == 'success') }}
    steps:
      - name: All checks passed
        run: echo "All checks passed!"
