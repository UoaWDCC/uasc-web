name: Deploy Client Production

on:
  workflow_dispatch:
  # schedules this to run every 30 minutes
  schedule:
    - cron: "30 * * * *"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run Setup Composite Action
        uses: ./.github/ci-actions/setup/

  deploy-client-production:
    name: Deploy Client Production
    needs: [setup]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      checks: write
    environment:
      name: client-production
      url: ${{ vars.DEPLOYMENT_URL }}
    concurrency:
      group: deploy-client-production
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: stable

      - name: Run Client Deployment Composite Action
        uses: ./.github/cd-actions/deploy-client/
        with:
          strategy: cloudflare
          environment: production
          # Firebase/Common Environment Variables
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          BACKEND_BASE_URL: ${{ secrets.BACKEND_BASE_URL }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.MEASUREMENT_ID }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PK }}
          SANITY_PROJECT_ID: ${{ secrets.SANITY_PROJECT_ID }}
          FRONTEND_BASE_URL: ${{ secrets.FRONTEND_URL }}
          # Cloudflare Deployment Secrets
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          # Common Secrets
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify:
    name: Verify
    needs: [deploy-client-production]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.deploy-client-production.result == 'success') }}
    steps:
      - name: All checks passed
        run: echo "All checks passed!"
