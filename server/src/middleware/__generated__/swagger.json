{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"FirebaseFirestore.Timestamp": {
				"description": "A Timestamp represents a point in time independent of any time zone or\ncalendar, represented as seconds and fractions of seconds at nanosecond\nresolution in UTC Epoch time. It is encoded using the Proleptic Gregorian\nCalendar which extends the Gregorian calendar backwards to year one. It is\nencoded assuming all minutes are 60 seconds long, i.e. leap seconds are\n\"smeared\" so that no leap second table is needed for interpretation. Range\nis from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.",
				"properties": {
					"seconds": {
						"type": "number",
						"format": "double",
						"description": "The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z."
					},
					"nanoseconds": {
						"type": "number",
						"format": "double",
						"description": "The non-negative fractions of a second at nanosecond resolution."
					}
				},
				"required": [
					"seconds",
					"nanoseconds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Partial_UserAdditionalInfo_.Exclude_keyofPartial_UserAdditionalInfo_.stripe_id__": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"has_whakapapa_season_pass": {
						"type": "boolean",
						"description": "If the user has a Whakapapa season pass, this should be set to `true`."
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Partial_UserAdditionalInfo_.stripe_id_": {
				"$ref": "#/components/schemas/Pick_Partial_UserAdditionalInfo_.Exclude_keyofPartial_UserAdditionalInfo_.stripe_id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"EditSelfRequestBody": {
				"properties": {
					"updatedInformation": {
						"$ref": "#/components/schemas/Omit_Partial_UserAdditionalInfo_.stripe_id_"
					}
				},
				"required": [
					"updatedInformation"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CommonResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DeleteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserSignupResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"jwtToken": {
						"type": "string"
					},
					"uid": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_UserAdditionalInfo.Exclude_keyofUserAdditionalInfo.stripe_id__": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"has_whakapapa_season_pass": {
						"type": "boolean",
						"description": "If the user has a Whakapapa season pass, this should be set to `true`."
					}
				},
				"required": [
					"date_of_birth",
					"phone_number",
					"first_name",
					"last_name",
					"dietary_requirements"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserAdditionalInfo.stripe_id_": {
				"$ref": "#/components/schemas/Pick_UserAdditionalInfo.Exclude_keyofUserAdditionalInfo.stripe_id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserSignupBody": {
				"properties": {
					"email": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/Omit_UserAdditionalInfo.stripe_id_"
					}
				},
				"required": [
					"email",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MembershipTypeValues": {
				"enum": [
					"uoa_student",
					"non_uoa_student",
					"returning_member",
					"new_non_student"
				],
				"type": "string"
			},
			"MembershipStripeProductResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"properties": {
								"originalPrice": {
									"type": "string"
								},
								"displayPrice": {
									"type": "string"
								},
								"discount": {
									"type": "boolean"
								},
								"description": {
									"type": "string"
								},
								"name": {
									"$ref": "#/components/schemas/MembershipTypeValues"
								},
								"productId": {
									"type": "string"
								}
							},
							"required": [
								"displayPrice",
								"discount",
								"name",
								"productId"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LodgePricingTypeValues": {
				"enum": [
					"single_friday_or_saturday",
					"normal"
				],
				"type": "string"
			},
			"LodgeStripeProductResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"properties": {
								"originalPrice": {
									"type": "string"
								},
								"displayPrice": {
									"type": "string"
								},
								"discount": {
									"type": "boolean"
								},
								"description": {
									"type": "string"
								},
								"name": {
									"$ref": "#/components/schemas/LodgePricingTypeValues"
								},
								"productId": {
									"type": "string"
								}
							},
							"required": [
								"displayPrice",
								"discount",
								"name",
								"productId"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"stripe.Stripe.Checkout.Session.Status": {
				"type": "string",
				"enum": [
					"complete",
					"expired",
					"open"
				]
			},
			"stripe.Stripe.Metadata": {
				"description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"type": "string"
				}
			},
			"MembershipPaymentResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stripeClientSecret": {
						"type": "string"
					},
					"membershipType": {
						"$ref": "#/components/schemas/MembershipTypeValues"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserPaymentRequestModel": {
				"properties": {
					"membershipType": {
						"$ref": "#/components/schemas/MembershipTypeValues"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BookingPaymentResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stripeClientSecret": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserBookingRequestingModel": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Event": {
				"properties": {
					"title": {
						"type": "string",
						"description": "The title of this event"
					},
					"description": {
						"type": "string",
						"description": "An optional description for this event\nThis should be in markdown"
					},
					"image_url": {
						"type": "string",
						"description": "The link for the image to display on the event page (essentially a thumbnail)"
					},
					"location": {
						"type": "string",
						"description": "The location of this event"
					},
					"google_forms_link": {
						"type": "string",
						"description": "A URL to the google form for signing up to the event. This is not to be included\nin any response body unless we are _near_ the period for sign up"
					},
					"sign_up_start_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The signup period start date.\nNote that this date is in UTC time.\nUse the same start and end date to indicate a 1 day signup period."
					},
					"sign_up_end_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The signup period end date.\nNote that this date is in UTC time."
					},
					"physical_start_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Event start date for the event i.e the day members should meet at shads,\n**NOT** the signups, refer to {@link sign_up_start_date} for signup start"
					},
					"physical_end_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Event end time for the event i.e the last day members will be at the lodge,\nis optionial in case of one day events. **NOT** the signups, refer to\n{@link sign_up_end_date} for signup end date"
					},
					"max_occupancy": {
						"type": "number",
						"format": "double",
						"description": "Max number of attendees at this event, left as optional for uncapped",
						"example": 30
					},
					"is_members_only": {
						"type": "boolean",
						"description": "If `true` then only members should see the sign up link"
					}
				},
				"required": [
					"title",
					"physical_start_date"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DocumentDataWithUid_Event_": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Event"
					},
					{
						"properties": {
							"id": {
								"type": "string",
								"description": "The ID of the document for which this document contains data."
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					}
				]
			},
			"GetAllEventsResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"nextCursor": {
						"type": "string",
						"description": "Needed for firestore operations which do not support offset\nbased pagination\n\n**Will be undefined in case of last page**"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/DocumentDataWithUid_Event_"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AllUserBookingSlotsResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"dates": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AvailableDates": {
				"properties": {
					"availableSpaces": {
						"type": "number",
						"format": "double"
					},
					"maxBookings": {
						"type": "number",
						"format": "double"
					},
					"date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"availableSpaces",
					"maxBookings",
					"date",
					"id"
				],
				"type": "object"
			},
			"AvailableDatesResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/AvailableDates"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AvailableDatesRequestModel": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserAccountTypes": {
				"enum": [
					"admin",
					"member",
					"guest"
				],
				"type": "string"
			},
			"BookingIdandUserData": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"has_whakapapa_season_pass": {
						"type": "boolean",
						"description": "If the user has a Whakapapa season pass, this should be set to `true`."
					},
					"stripe_id": {
						"type": "string",
						"description": "For identification DO NOT RETURN to users in exposed endpoints"
					},
					"uid": {
						"type": "string",
						"description": "Firebase identifier of the user *data* based on the firestore document"
					},
					"dateJoined": {
						"type": "string",
						"description": "Formatted UTC date string of when the account was created"
					},
					"email": {
						"type": "string",
						"description": "The email the user uses to log in"
					},
					"membership": {
						"$ref": "#/components/schemas/UserAccountTypes",
						"description": "What type of account the user has"
					},
					"bookingId": {
						"type": "string"
					}
				},
				"required": [
					"date_of_birth",
					"phone_number",
					"first_name",
					"last_name",
					"dietary_requirements",
					"uid",
					"email",
					"membership",
					"bookingId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UsersByDateRangeResponse": {
				"description": "Represents the response structure for fetching users by date range.",
				"properties": {
					"data": {
						"items": {
							"properties": {
								"users": {
									"items": {
										"$ref": "#/components/schemas/BookingIdandUserData"
									},
									"type": "array"
								},
								"date": {
									"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
								}
							},
							"required": [
								"users",
								"date"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"BookingsByDateRangeRequestModel": {
				"description": "Represents the structure of a request model for fetching bookings within a specific date range.",
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"required": [
					"startDate",
					"endDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BookingSlotUpdateResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"updatedBookingSlots": {
						"items": {
							"properties": {
								"bookingSlotId": {
									"type": "string"
								},
								"date": {
									"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
								}
							},
							"required": [
								"bookingSlotId",
								"date"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MakeDatesAvailableRequestBody": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"slots": {
						"type": "number",
						"format": "double",
						"maximum": 32,
						"minimum": 0
					}
				},
				"required": [
					"startDate",
					"endDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_MakeDatesAvailableRequestBody.Exclude_keyofMakeDatesAvailableRequestBody.slots__": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					}
				},
				"required": [
					"startDate",
					"endDate"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_MakeDatesAvailableRequestBody.slots_": {
				"$ref": "#/components/schemas/Pick_MakeDatesAvailableRequestBody.Exclude_keyofMakeDatesAvailableRequestBody.slots__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UIdssByDateRangeResponse": {
				"description": "Represents the response structure for fetching user ids by date range.",
				"properties": {
					"data": {
						"items": {
							"properties": {
								"users": {
									"items": {
										"type": "string"
									},
									"type": "array"
								},
								"date": {
									"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
								}
							},
							"required": [
								"users",
								"date"
							],
							"type": "object"
						},
						"type": "array"
					},
					"error": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateBookingsRequestModel": {
				"properties": {
					"startDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"endDate": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Firestore timestamp, should represent a UTC date that is set to exactly midnight"
					},
					"userId": {
						"type": "string",
						"description": "List of users to add to the bookings between date range"
					}
				},
				"required": [
					"startDate",
					"endDate",
					"userId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BookingDeleteResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"user_id": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DeleteBookingRequest": {
				"properties": {
					"bookingID": {
						"type": "string"
					}
				},
				"required": [
					"bookingID"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CombinedUserData": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"has_whakapapa_season_pass": {
						"type": "boolean",
						"description": "If the user has a Whakapapa season pass, this should be set to `true`."
					},
					"stripe_id": {
						"type": "string",
						"description": "For identification DO NOT RETURN to users in exposed endpoints"
					},
					"uid": {
						"type": "string",
						"description": "Firebase identifier of the user *data* based on the firestore document"
					},
					"dateJoined": {
						"type": "string",
						"description": "Formatted UTC date string of when the account was created"
					},
					"email": {
						"type": "string",
						"description": "The email the user uses to log in"
					},
					"membership": {
						"$ref": "#/components/schemas/UserAccountTypes",
						"description": "What type of account the user has"
					}
				},
				"required": [
					"date_of_birth",
					"phone_number",
					"first_name",
					"last_name",
					"dietary_requirements",
					"uid",
					"email",
					"membership"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AllUsersResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"nextCursor": {
						"type": "string",
						"description": "Needed for firestore operations which do not support offset\nbased pagination\n\n**Will be undefined in case of last page**"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/CombinedUserData"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GetUserResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/CombinedUserData"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UserAdditionalInfo": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"has_whakapapa_season_pass": {
						"type": "boolean",
						"description": "If the user has a Whakapapa season pass, this should be set to `true`."
					},
					"stripe_id": {
						"type": "string",
						"description": "For identification DO NOT RETURN to users in exposed endpoints"
					}
				},
				"required": [
					"date_of_birth",
					"phone_number",
					"first_name",
					"last_name",
					"dietary_requirements"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/UserAdditionalInfo"
					}
				},
				"required": [
					"uid",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_UserAdditionalInfo_": {
				"properties": {
					"date_of_birth": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
					},
					"does_snowboarding": {
						"type": "boolean"
					},
					"does_racing": {
						"type": "boolean"
					},
					"does_ski": {
						"type": "boolean"
					},
					"phone_number": {
						"type": "number",
						"format": "double"
					},
					"gender": {
						"type": "string"
					},
					"emergency_contact": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"dietary_requirements": {
						"type": "string"
					},
					"ethnicity": {
						"type": "string",
						"description": "**OPTIONAL** field that the user should have the choice to provide"
					},
					"faculty": {
						"type": "string"
					},
					"university": {
						"type": "string"
					},
					"student_id": {
						"type": "string"
					},
					"university_year": {
						"type": "string"
					},
					"has_whakapapa_season_pass": {
						"type": "boolean",
						"description": "If the user has a Whakapapa season pass, this should be set to `true`."
					},
					"stripe_id": {
						"type": "string",
						"description": "For identification DO NOT RETURN to users in exposed endpoints"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"EditUsersRequestBody": {
				"properties": {
					"users": {
						"items": {
							"properties": {
								"updatedInformation": {
									"$ref": "#/components/schemas/Partial_UserAdditionalInfo_"
								},
								"uid": {
									"type": "string"
								}
							},
							"required": [
								"updatedInformation",
								"uid"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"users"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PromoteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"DemoteUserRequestBody": {
				"properties": {
					"uid": {
						"type": "string"
					}
				},
				"required": [
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddCouponRequestBody": {
				"properties": {
					"uid": {
						"type": "string",
						"description": "The UID of the user to whom the coupon will be added."
					},
					"quantity": {
						"type": "number",
						"format": "double",
						"description": "The number of the coupon to be added."
					}
				},
				"required": [
					"uid",
					"quantity"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BookingAddedEvent": {
				"description": "Event used to track a user being **manually** added to a booking (only possible via admin view)",
				"properties": {
					"timestamp": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The time which the booking operation was performed. MUST be in UTC format"
					},
					"start_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The start of the operated on date range"
					},
					"end_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The end of the operated on date range"
					},
					"event_type": {
						"type": "string",
						"enum": [
							"added_user_to_booking"
						],
						"nullable": false,
						"description": "The type of event that the admin performed, used for parsing on the front-end\n\nEach of these are associated with the following:\n\n- `\"added_user_to_booking\"`: {@link BookingAddedEvent}\n- `\"removed_user_from_booking\"`: {@link BookingDeletedEvent}\n- `\"changed_date_availability\"`: {@link BookingAvailabilityChangeEvent}"
					},
					"uid": {
						"type": "string",
						"description": "The id corresponding to the user who had a **manually** added booking"
					}
				},
				"required": [
					"timestamp",
					"start_date",
					"end_date",
					"event_type",
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BookingDeletedEvent": {
				"description": "Event used to track the removal of a user from a date range (only possible via admin view)",
				"properties": {
					"timestamp": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The time which the booking operation was performed. MUST be in UTC format"
					},
					"start_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The start of the operated on date range"
					},
					"end_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The end of the operated on date range"
					},
					"event_type": {
						"type": "string",
						"enum": [
							"removed_user_from_booking"
						],
						"nullable": false,
						"description": "The type of event that the admin performed, used for parsing on the front-end\n\nEach of these are associated with the following:\n\n- `\"added_user_to_booking\"`: {@link BookingAddedEvent}\n- `\"removed_user_from_booking\"`: {@link BookingDeletedEvent}\n- `\"changed_date_availability\"`: {@link BookingAvailabilityChangeEvent}"
					},
					"uid": {
						"type": "string",
						"description": "The id corresponding to the user who had a **manually** deleted booking"
					}
				},
				"required": [
					"timestamp",
					"start_date",
					"end_date",
					"event_type",
					"uid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BookingAvailabilityChangeEvent": {
				"description": "Event used to track the history of the availability of dates changing",
				"properties": {
					"timestamp": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The time which the booking operation was performed. MUST be in UTC format"
					},
					"start_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The start of the operated on date range"
					},
					"end_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The end of the operated on date range"
					},
					"event_type": {
						"type": "string",
						"enum": [
							"changed_date_availability"
						],
						"nullable": false,
						"description": "The type of event that the admin performed, used for parsing on the front-end\n\nEach of these are associated with the following:\n\n- `\"added_user_to_booking\"`: {@link BookingAddedEvent}\n- `\"removed_user_from_booking\"`: {@link BookingDeletedEvent}\n- `\"changed_date_availability\"`: {@link BookingAvailabilityChangeEvent}"
					},
					"change": {
						"type": "number",
						"format": "double",
						"description": "The **signed** difference between the newly available slots and the previously available slots.\n\nFor example, if the original available slots was 32, and the availability was set to 0,\nthe `change` in the slots needs to be **0 - 32 = -32**\n\nAnd vice versa, if the original available slots was 16, and the availability was set to 32,\nthe `change` would be **32 - 16 = 16**"
					}
				},
				"required": [
					"timestamp",
					"start_date",
					"end_date",
					"event_type",
					"change"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BookingHistoryEvent": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/BookingAddedEvent"
					},
					{
						"$ref": "#/components/schemas/BookingDeletedEvent"
					},
					{
						"$ref": "#/components/schemas/BookingAvailabilityChangeEvent"
					}
				],
				"description": "Helper type to specify the possible datastruces for the booking history"
			},
			"FetchLatestBookingHistoryEventResponse": {
				"properties": {
					"nextCursor": {
						"type": "string",
						"description": "Needed for firestore operations which do not support offset\nbased pagination\n\n**Will be undefined in case of last page**"
					},
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"historyEvents": {
						"items": {
							"$ref": "#/components/schemas/BookingHistoryEvent"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateEventBody": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/Event"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_Event_": {
				"properties": {
					"title": {
						"type": "string",
						"description": "The title of this event"
					},
					"description": {
						"type": "string",
						"description": "An optional description for this event\nThis should be in markdown"
					},
					"image_url": {
						"type": "string",
						"description": "The link for the image to display on the event page (essentially a thumbnail)"
					},
					"location": {
						"type": "string",
						"description": "The location of this event"
					},
					"google_forms_link": {
						"type": "string",
						"description": "A URL to the google form for signing up to the event. This is not to be included\nin any response body unless we are _near_ the period for sign up"
					},
					"sign_up_start_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The signup period start date.\nNote that this date is in UTC time.\nUse the same start and end date to indicate a 1 day signup period."
					},
					"sign_up_end_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "The signup period end date.\nNote that this date is in UTC time."
					},
					"physical_start_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Event start date for the event i.e the day members should meet at shads,\n**NOT** the signups, refer to {@link sign_up_start_date} for signup start"
					},
					"physical_end_date": {
						"$ref": "#/components/schemas/FirebaseFirestore.Timestamp",
						"description": "Event end time for the event i.e the last day members will be at the lodge,\nis optionial in case of one day events. **NOT** the signups, refer to\n{@link sign_up_end_date} for signup end date"
					},
					"max_occupancy": {
						"type": "number",
						"format": "double",
						"description": "Max number of attendees at this event, left as optional for uncapped",
						"example": 30
					},
					"is_members_only": {
						"type": "boolean",
						"description": "If `true` then only members should see the sign up link"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"GetEventResponse": {
				"properties": {
					"error": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Event"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"MailConfig": {
				"description": "Interface for mail configuration settings that can be stored in Firebase",
				"properties": {
					"email": {
						"type": "string",
						"description": "Email address used for sending emails"
					},
					"password": {
						"type": "string",
						"description": "App password for the email service"
					},
					"fromHeader": {
						"type": "string",
						"description": "From header for sent emails",
						"default": "UASC Bookings"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GetMailConfigResponse": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/MailConfig",
						"description": "The current mail configuration or undefined if not found"
					},
					"error": {
						"type": "string",
						"description": "Error message if an error occurred"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UpdateMailConfigResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Whether the update was successful"
					},
					"error": {
						"type": "string",
						"description": "Error message if an error occurred"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_MailConfig_": {
				"properties": {
					"email": {
						"type": "string",
						"description": "Email address used for sending emails"
					},
					"password": {
						"type": "string",
						"description": "App password for the email service"
					},
					"fromHeader": {
						"type": "string",
						"description": "From header for sent emails",
						"default": "UASC Bookings"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"UpdateMailConfigRequestBody": {
				"properties": {
					"config": {
						"$ref": "#/components/schemas/Partial_MailConfig_",
						"description": "The updated mail configuration settings"
					}
				},
				"required": [
					"config"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EmailTemplate": {
				"description": "Interface for email template configuration",
				"properties": {
					"id": {
						"type": "string",
						"description": "The template ID",
						"example": "booking_confirmation"
					},
					"content": {
						"type": "string",
						"description": "The template content in Pug format"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Last updated timestamp"
					},
					"name": {
						"type": "string",
						"description": "The name of the template",
						"example": "Booking Confirmation"
					},
					"description": {
						"type": "string",
						"description": "A description of the template's purpose"
					}
				},
				"required": [
					"id",
					"content",
					"updatedAt",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetAllEmailTemplatesResponse": {
				"properties": {
					"templates": {
						"items": {
							"$ref": "#/components/schemas/EmailTemplate"
						},
						"type": "array",
						"description": "The list of available email templates"
					},
					"error": {
						"type": "string",
						"description": "Error message if an error occurred"
					}
				},
				"required": [
					"templates"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GetEmailTemplateResponse": {
				"properties": {
					"template": {
						"$ref": "#/components/schemas/EmailTemplate",
						"description": "The email template or undefined if not found"
					},
					"error": {
						"type": "string",
						"description": "Error message if an error occurred"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"UpdateEmailTemplateResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"description": "Whether the update was successful"
					},
					"error": {
						"type": "string",
						"description": "Error message if an error occurred"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateEmailTemplateRequestBody": {
				"properties": {
					"id": {
						"type": "string",
						"description": "The template ID",
						"example": "booking_confirmation"
					},
					"name": {
						"type": "string",
						"description": "The template name",
						"example": "Booking Confirmation"
					},
					"content": {
						"type": "string",
						"description": "The template content in Pug format"
					},
					"description": {
						"type": "string",
						"description": "An optional description of the template's purpose"
					}
				},
				"required": [
					"id",
					"name",
					"content"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "server",
		"version": "1.0.0",
		"contact": {}
	},
	"paths": {
		"/users/self": {
			"get": {
				"operationId": "GetSelf",
				"responses": {
					"200": {
						"description": "Fetched self data",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"stripe_id": {
											"type": "string"
										},
										"has_whakapapa_season_pass": {
											"type": "boolean"
										},
										"university_year": {
											"type": "string"
										},
										"student_id": {
											"type": "string"
										},
										"university": {
											"type": "string"
										},
										"faculty": {
											"type": "string"
										},
										"ethnicity": {
											"type": "string"
										},
										"dietary_requirements": {
											"type": "string"
										},
										"last_name": {
											"type": "string"
										},
										"first_name": {
											"type": "string"
										},
										"emergency_contact": {
											"type": "string"
										},
										"gender": {
											"type": "string"
										},
										"phone_number": {
											"type": "number",
											"format": "double"
										},
										"does_ski": {
											"type": "boolean"
										},
										"does_racing": {
											"type": "boolean"
										},
										"does_snowboarding": {
											"type": "boolean"
										},
										"date_of_birth": {
											"$ref": "#/components/schemas/FirebaseFirestore.Timestamp"
										},
										"uid": {
											"type": "string"
										}
									},
									"required": [
										"dietary_requirements",
										"last_name",
										"first_name",
										"phone_number",
										"date_of_birth",
										"uid"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Fetches users additional info based on their uid.",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/users/edit-self": {
			"patch": {
				"operationId": "EditSelf",
				"responses": {
					"200": {
						"description": "Successful edit"
					}
				},
				"description": "Edits the user's additional info based on their uid.",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The updated user additional info, note that the stripe_id is omitted.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditSelfRequestBody",
								"description": "- The updated user additional info, note that the stripe_id is omitted."
							}
						}
					}
				}
			}
		},
		"/users/delete-user": {
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "Deleted user",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/CommonResponse"
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "Deletes a user based on their uid. This requires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The uid of the user to be deleted.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteUserRequestBody",
								"description": "- The uid of the user to be deleted."
							}
						}
					}
				}
			}
		},
		"/webhook": {
			"post": {
				"operationId": "ReceiveWebhook",
				"responses": {
					"200": {
						"description": "Webhook post received"
					}
				},
				"description": "Webhook endpoint for Stripe events.\nThis single endpoint is setup in the Stripe developer config to handle various events.",
				"security": [],
				"parameters": []
			}
		},
		"/signup": {
			"post": {
				"operationId": "Signup",
				"responses": {
					"200": {
						"description": "Signup successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserSignupResponse"
								}
							}
						}
					}
				},
				"description": "Signs up a user and creates a user record in the database. Also creates a JWT token for the user in AuthService.",
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- The user's email and their user additional info.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserSignupBody",
								"description": "- The user's email and their user additional info."
							}
						}
					}
				}
			}
		},
		"/payment/membership_prices": {
			"get": {
				"operationId": "GetMembershipPrices",
				"responses": {
					"200": {
						"description": "The prices of the membership products.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MembershipStripeProductResponse"
								}
							}
						}
					}
				},
				"description": "Fetches the prices of the membership products from Stripe.",
				"security": [],
				"parameters": []
			}
		},
		"/payment/lodge_prices": {
			"get": {
				"operationId": "GetLodgePrices",
				"responses": {
					"200": {
						"description": "The prices of the lodge products.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LodgeStripeProductResponse"
								}
							}
						}
					}
				},
				"description": "Fetches the prices of the lodge products from Stripe.",
				"security": [],
				"parameters": []
			}
		},
		"/payment/checkout_status": {
			"get": {
				"operationId": "GetCheckoutSessionDetails",
				"responses": {
					"200": {
						"description": "Session Fetched",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"metadata": {
											"$ref": "#/components/schemas/stripe.Stripe.Metadata"
										},
										"pricePaid": {
											"type": "number",
											"format": "double"
										},
										"customer_email": {
											"type": "string"
										},
										"status": {
											"$ref": "#/components/schemas/stripe.Stripe.Checkout.Session.Status"
										}
									},
									"required": [
										"metadata",
										"pricePaid",
										"customer_email",
										"status"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Fetches the details of a checkout session based on a stripe checkout session id.",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The id of the stripe checkout session to fetch.",
						"in": "query",
						"name": "sessionId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/payment/membership": {
			"post": {
				"operationId": "GetMembershipPayment",
				"responses": {
					"200": {
						"description": "Session created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MembershipPaymentResponse"
								}
							}
						}
					}
				},
				"description": "Creates a checkout session for membership payment.",
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The request body containing the membership type.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserPaymentRequestModel",
								"description": "The request body containing the membership type."
							}
						}
					}
				}
			}
		},
		"/payment/booking": {
			"post": {
				"operationId": "GetBookingPayment",
				"responses": {
					"200": {
						"description": "Created booking checkout session",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BookingPaymentResponse"
								}
							}
						}
					}
				},
				"description": "Creates a new booking session for the date ranges passed in,\nwill return any existing sessions if they have been started in\nthe last 30 minutes (the minimum period stripe has to persist a session for)",
				"security": [
					{
						"jwt": [
							"member"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The request body containing the date ranges for the booking.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserBookingRequestingModel",
								"description": "The request body containing the date ranges for the booking."
							}
						}
					}
				}
			}
		},
		"/events": {
			"get": {
				"operationId": "GetAllEvents",
				"responses": {
					"200": {
						"description": "Successfully fetched all events",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetAllEventsResponse"
								}
							}
						}
					}
				},
				"description": "Fetches latest events starting from the event with the latest starting date\n(**NOT** the signup open date) based on limit. Is paginated with a cursor",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"default": 20,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/events/for-members": {
			"get": {
				"operationId": "GetAllEventsAsMember",
				"responses": {
					"200": {
						"description": "Successfully fetched all events",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetAllEventsResponse"
								}
							}
						}
					}
				},
				"description": "Fetches latest events starting from the event with the latest starting date\n(**NOT** the signup open date) based on limit. Is paginated with a cursor.\n\nThis endpoint is only accessible to members as it includes the sign up links\nmembers-only events",
				"security": [
					{
						"jwt": [
							"member"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"default": 20,
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/bookings": {
			"get": {
				"operationId": "GetAllBookings",
				"responses": {
					"200": {
						"description": "Found bookings",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AllUserBookingSlotsResponse"
								}
							}
						}
					}
				},
				"description": "Fetches all bookings for a user based on their UID.",
				"security": [
					{
						"jwt": [
							"member"
						]
					}
				],
				"parameters": []
			}
		},
		"/bookings/available-dates": {
			"post": {
				"operationId": "GetAvailableDates",
				"responses": {
					"200": {
						"description": "Availabilities found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AvailableDatesResponse"
								}
							}
						}
					}
				},
				"description": "Fetches all available booking dates within a date range.",
				"security": [
					{
						"jwt": [
							"member"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The date range to check for available booking slots.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AvailableDatesRequestModel",
								"description": "- The date range to check for available booking slots."
							}
						}
					}
				}
			}
		},
		"/bookings/fetch-users": {
			"post": {
				"operationId": "FetchUsersByBookingDateRange",
				"responses": {
					"200": {
						"description": "Users found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UsersByDateRangeResponse"
								}
							}
						}
					}
				},
				"description": "This method fetches users based on a booking date range.\nThis method requires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The date range to check for user bookings.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BookingsByDateRangeRequestModel",
								"description": "- The date range to check for user bookings."
							}
						}
					}
				}
			}
		},
		"/admin/bookings/make-dates-available": {
			"post": {
				"operationId": "MakeDateAvailable",
				"responses": {
					"201": {
						"description": "Slot made available",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BookingSlotUpdateResponse"
								}
							}
						}
					}
				},
				"description": "Booking Operations",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The start and end date of the range and the number of slots to add.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MakeDatesAvailableRequestBody",
								"description": "- The start and end date of the range and the number of slots to add."
							}
						}
					}
				}
			}
		},
		"/admin/bookings/make-dates-unavailable": {
			"post": {
				"operationId": "MakeDateUnavailable",
				"responses": {
					"201": {
						"description": "Slot made unavailable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BookingSlotUpdateResponse"
								}
							}
						}
					}
				},
				"description": "Decreases availability count to 0 for all booking slots in a date range.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The start and end date of the range, the number of slots is omitted as we're decreases all slots to 0.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_MakeDatesAvailableRequestBody.slots_",
								"description": "- The start and end date of the range, the number of slots is omitted as we're decreases all slots to 0."
							}
						}
					}
				}
			}
		},
		"/admin/bookings/create": {
			"post": {
				"operationId": "CreateBookings",
				"responses": {
					"200": {
						"description": "Bookings successfully created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UIdssByDateRangeResponse"
								}
							}
						}
					}
				},
				"description": "An admin method to create bookings for a list of users within a date range.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The date range and list of user ids to create bookings for.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateBookingsRequestModel",
								"description": "- The date range and list of user ids to create bookings for."
							}
						}
					}
				}
			}
		},
		"/admin/bookings/delete": {
			"post": {
				"operationId": "RemoveBooking",
				"responses": {
					"200": {
						"description": "Booking deleted successfuly",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BookingDeleteResponse"
								}
							}
						}
					}
				},
				"description": "Delete a users booking by booking ID.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The booking ID to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DeleteBookingRequest",
								"description": "- The booking ID to delete."
							}
						}
					}
				}
			}
		},
		"/admin/users": {
			"get": {
				"operationId": "GetAllUsers",
				"responses": {
					"200": {
						"description": "Users found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AllUsersResponse"
								}
							}
						}
					}
				},
				"description": "User Operations",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "- The cursor to start fetching users from. Essentially a pagination token.",
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "- The number of users to fetch. Defaults to 100. Is also a maximum of 100 users per fetch",
						"in": "query",
						"name": "toFetch",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/admin/users/{uid}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "User found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetUserResponse"
								}
							}
						}
					}
				},
				"description": "Get a user by their UID.\nRequires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "- The UID of the user to fetch.",
						"in": "path",
						"name": "uid",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/admin/users/create": {
			"put": {
				"operationId": "CreateUser",
				"responses": {
					"200": {
						"description": "Created"
					}
				},
				"description": "Adds a new user to the database with their UID and user data.\nRequires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The user data to create and their UID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserRequestBody",
								"description": "- The user data to create and their UID."
							}
						}
					}
				}
			}
		},
		"/admin/users/bulk-edit": {
			"patch": {
				"operationId": "EditUsers",
				"responses": {
					"200": {
						"description": "Edited"
					}
				},
				"description": "Edits a list of users with updated user additional info.\nRequires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The list of users to edit and their updated information.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EditUsersRequestBody",
								"description": "- The list of users to edit and their updated information."
							}
						}
					}
				}
			}
		},
		"/admin/users/promote": {
			"put": {
				"operationId": "PromoteUser",
				"responses": {
					"200": {
						"description": "Promoted user"
					}
				},
				"description": "Promotes a user to a member. This returns a conflict when the user is already a member.\nRequires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The UID of the user to promote.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PromoteUserRequestBody",
								"description": "- The UID of the user to promote."
							}
						}
					}
				}
			}
		},
		"/admin/users/demote": {
			"put": {
				"operationId": "DemoteUser",
				"responses": {
					"200": {
						"description": "Demoted user"
					}
				},
				"description": "Demotes a member to a guest. This returns a conflict when the user is already a guest.\nRequires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The UID of the user to demote.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DemoteUserRequestBody",
								"description": "- The UID of the user to demote."
							}
						}
					}
				}
			}
		},
		"/admin/users/demote-all": {
			"patch": {
				"operationId": "DemoteAllUsers",
				"responses": {
					"200": {
						"description": "Demoted all non-admin users"
					}
				},
				"description": "Demotes all non-admin users to guests. This is used to purge all membership statuses at the end of a billing cycle.\nRequires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": []
			}
		},
		"/admin/users/add-coupon": {
			"post": {
				"operationId": "AddCoupon",
				"responses": {
					"200": {
						"description": "Coupon Added"
					}
				},
				"description": "Adds a coupon to a user's stripe id.\nRequires an admin JWT token.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- The UID of the user to add the coupon to and the quantity of coupons to add.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddCouponRequestBody",
								"description": "- The UID of the user to add the coupon to and the quantity of coupons to add."
							}
						}
					}
				}
			}
		},
		"/admin/bookings/history": {
			"get": {
				"operationId": "GetLatestHistory",
				"responses": {
					"200": {
						"description": "History Events Fetched",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FetchLatestBookingHistoryEventResponse"
								}
							}
						}
					}
				},
				"description": "Fetches the **latest** booking history events (uses cursor-based pagination)",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/admin/events": {
			"post": {
				"operationId": "CreateNewEvent",
				"responses": {
					"201": {
						"description": "Created Event"
					}
				},
				"description": "Endpoint for admin to create a new event",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateEventBody"
							}
						}
					}
				}
			}
		},
		"/admin/events/{id}": {
			"patch": {
				"operationId": "EditEvent",
				"responses": {
					"200": {
						"description": "Successfully edited the event!"
					}
				},
				"description": "Endpoint for admints to edit an event.",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Event_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteEvent",
				"responses": {
					"204": {
						"description": "Deleted single event"
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"get": {
				"operationId": "GetEventById",
				"responses": {
					"200": {
						"description": "Successfully fetched the event",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetEventResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/admin/redirect/{redirectKey}": {
			"get": {
				"operationId": "GetEnvUrl",
				"responses": {
					"200": {
						"description": "Successfully retrieved URL",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"error": {
											"type": "string"
										},
										"url": {
											"type": "string"
										}
									},
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Returns a URL specified in environment variables",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "- Key to look up in environment variables for the URL",
						"in": "path",
						"name": "redirectKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/admin/mail-config": {
			"get": {
				"operationId": "GetMailConfig",
				"responses": {
					"200": {
						"description": "Mail configuration retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetMailConfigResponse"
								}
							}
						}
					}
				},
				"description": "Mail Configuration Operations",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateMailConfig",
				"responses": {
					"200": {
						"description": "Mail configuration updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateMailConfigResponse"
								}
							}
						}
					}
				},
				"description": "Update the mail configuration",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The updated mail configuration",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateMailConfigRequestBody",
								"description": "The updated mail configuration"
							}
						}
					}
				}
			}
		},
		"/admin/mail-templates": {
			"get": {
				"operationId": "GetAllEmailTemplates",
				"responses": {
					"200": {
						"description": "Email templates retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetAllEmailTemplatesResponse"
								}
							}
						}
					}
				},
				"description": "Get all available email templates",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": []
			},
			"put": {
				"operationId": "UpdateEmailTemplate",
				"responses": {
					"200": {
						"description": "Email template updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateEmailTemplateResponse"
								}
							}
						}
					}
				},
				"description": "Update or create an email template",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The email template to update or create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateEmailTemplateRequestBody",
								"description": "The email template to update or create"
							}
						}
					}
				}
			}
		},
		"/admin/mail-templates/{id}": {
			"get": {
				"operationId": "GetEmailTemplate",
				"responses": {
					"200": {
						"description": "Email template retrieved",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetEmailTemplateResponse"
								}
							}
						}
					}
				},
				"description": "Get a specific email template by ID",
				"security": [
					{
						"jwt": [
							"admin"
						]
					}
				],
				"parameters": [
					{
						"description": "The template ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}